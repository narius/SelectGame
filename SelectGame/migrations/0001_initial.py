# Generated by Django 2.0.2 on 2018-03-19 18:58

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('Social', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='name')),
            ],
            options={
                'verbose_name': 'category',
                'ordering': ['name'],
                'verbose_name_plural': 'categories',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(verbose_name='date')),
                ('is_public', models.BooleanField(verbose_name='public')),
                ('name', models.CharField(blank=True, max_length=100, verbose_name='name')),
                ('minimum_number_of_players', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='minimum number of players')),
                ('maximum_number_of_players', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='maximum number of players')),
            ],
            options={
                'verbose_name': 'event',
                'verbose_name_plural': 'events',
            },
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, upload_to='uploads/game_images')),
                ('name', models.CharField(max_length=30, verbose_name='name')),
                ('comment', models.TextField(blank=True, verbose_name='Comment')),
                ('minimum_number_of_players', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='minimum number of players')),
                ('maximum_number_of_players', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='maximum number of players')),
                ('link', models.URLField(blank=True, verbose_name='link')),
                ('category', models.ManyToManyField(to='SelectGame.Category')),
            ],
            options={
                'verbose_name': 'game',
                'ordering': ['name'],
                'verbose_name_plural': 'games',
            },
        ),
        migrations.CreateModel(
            name='GameLibrary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('games', models.ManyToManyField(to='SelectGame.Game', verbose_name='games')),
                ('owner', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'game library',
                'verbose_name_plural': 'game library',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(max_length=100, verbose_name='address')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Address',
                'verbose_name_plural': 'Address',
            },
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(0)], verbose_name='rating')),
                ('review', models.TextField(blank=True, verbose_name='review')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SelectGame.Game')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'rating',
                'verbose_name_plural': 'ratings',
            },
        ),
        migrations.AddField(
            model_name='event',
            name='games',
            field=models.ManyToManyField(blank=True, to='SelectGame.Game', verbose_name='games'),
        ),
        migrations.AddField(
            model_name='event',
            name='group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Social.Group'),
        ),
        migrations.AddField(
            model_name='event',
            name='location',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SelectGame.Location', verbose_name='location'),
        ),
        migrations.AddField(
            model_name='event',
            name='messages',
            field=models.ManyToManyField(blank=True, to='Social.UserMessage'),
        ),
        migrations.AddField(
            model_name='event',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_owner', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='event',
            name='participants',
            field=models.ManyToManyField(blank=True, related_name='event_participants', to=settings.AUTH_USER_MODEL, verbose_name='participants'),
        ),
        migrations.AlterUniqueTogether(
            name='rating',
            unique_together={('game', 'user')},
        ),
    ]
